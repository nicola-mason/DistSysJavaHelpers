package hu.mta.sztaki.lpds.cloud.simulator.helpers.trace;

import java.lang.reflect.InvocationTargetException;
import java.time.Duration;

import hu.mta.sztaki.lpds.cloud.simulator.helpers.job.Job;
import hu.mta.sztaki.lpds.cloud.simulator.helpers.trace.file.TraceFileReaderFoundation;

/**
 * This trace loader is used to generate jobs from .log files.
 * @author Nicola Mason
 *
 */
public class TraceLoaderNM extends TraceFileReaderFoundation{

	public TraceLoaderNM(String fileName, int from, int to, boolean allowedReadingFurther,
			Class<? extends Job> jobType) throws SecurityException, NoSuchMethodException {
		super("Log format", fileName, from, to, allowedReadingFurther, jobType);
	}
	
	/**
	 * Basic validation check on a trace line. Ensures that the line format is correct.
	 * 
	 * @param traceLine A single line from the .log file
	 * @return whether the line is a valid trace line - i.e. can a job be created from it
	 */
	@Override
	protected boolean isTraceLine(String traceLine) {
		
		String[] split = traceLine.split(" ");
		
		//valid trace line should have 4 values. Otherwise, discard it.
		if(split.length < 4) {
			return false;
		}
		try {Integer.parseInt(split[0]);} catch (NumberFormatException error) {
            return false;
        } try {Double.parseDouble(split[1]);} catch (NumberFormatException error) { 
            return false;
        } if (split[2].contains(" ")) { 
            return false;
        } if(split[3].equals("url") || split[3].equals("default") || split[3].equals("export")) {
            return true;
        }
        return false;
	}
	
	/**
	 * Normally used to collect any data that would be useful for the autoscaler to have. 
	 * However these files do not have any extra data so nothing is done with this method.
	 * 
	 * @param traceLine A single line from the .log file
	 */
	@Override
	protected void metaDataCollector(String traceLine) {
			//TODO: Autogenerated method stub
	}
	
	/**
	 * Method to create a job from a trace line.
	 * 
	 * @param traceLine A single line from the .log file
	 * @return A new instance of a Job with the values determined from the trace line
	 */
	@Override
	protected Job createJobFromLine(String traceLine) throws InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
		String[] split = traceLine.split(" ");
		
		//job arrival time and duration - round into whole seconds
		int arrTimeRounded = Math.round(Float.parseFloat(split[0]));
		int durationRounded = Math.round(Float.parseFloat(split[1]));
		
		//assign values from the trace array
		try {
			String id = split[2];
			long submit = Long.valueOf(arrTimeRounded);
			long queue = 0;
			long exec = Long.valueOf(durationRounded);
			int nprocs = 1;
			double ppCpu = 1;
			long ppMem = 512;
			String user = null;
			String group = null;
			String executable = split[3];
			Job preceding = null;
			long delayAfter = 0;
			
			return jobCreator.newInstance(id, submit, queue, exec, nprocs, ppCpu, ppMem, user, group, executable, preceding, delayAfter);
			
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println("Error: Array Index Out Of Bounds");
			return null;
		}
	}
}
